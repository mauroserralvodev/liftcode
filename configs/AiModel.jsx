const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
  };
  const CodeGenerationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  
    export const chatSession = model.startChat({
        generationConfig:CodeGenerationConfig,
        history: [
        ],
    });

    export const GenAiCode=model.startChat({
        generationConfig:CodeGenerationConfig,
        history: [ 
          {
            role: "user",
            parts: [
              {text: " Generate to do app : Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHere’s the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  - Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n- The lucide-react library is also available to be imported IF NECCESARY ONLY FOR THE FOLLOWING ICONS: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Clock, Heart, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, ArrowRight. Here's an example of importing and using one: import { Heart } from \"lucide-react\"\\` & \\<Heart className=\"\"  />\\. PLEASE ONLY USE THE ICONS IF AN ICON IS NEEDED IN THE USER'S REQUEST.\n  "},
            ],
          },
          {
            role: "model",
            parts: [
              {text: "Respond only with plain text formatted in Markdown. Avoid any JSON structure or unsolicited code.```json\n{\n  \"projectTitle\": \"Task Management Dashboard\",\n  \"explanation\": \"This React project is a task management dashboard designed to help users organize and track their tasks effectively. It utilizes Tailwind CSS for styling to create a visually appealing and responsive user interface. The dashboard is structured into multiple components, each responsible for a specific part of the application, such as task lists, task creation forms, and task details views. Lucide-react icons are used to enhance the user experience with intuitive visual cues. Date-fns for date format and react-chartjs-2 chart, graph library used to provide data overview.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React from 'react';\\nimport TaskList from './components/TaskList';\\nimport TaskForm from './components/TaskForm';\\nimport Overview from './components/Overview';\\nimport { useState, useEffect } from 'react';\\nimport { format } from 'date-fns';\\n\\nconst today = new Date();\\nconst formattedDate = format(today, 'MMMM dd, yyyy');\\n\\nfunction App() {\\n  const [tasks, setTasks] = useState([]);\\n\\n  useEffect(() => {\\n    // Load tasks from local storage on initial render\\n    const storedTasks = localStorage.getItem('tasks');\\n    if (storedTasks) {\\n      setTasks(JSON.parse(storedTasks));\\n    }\\n  }, []);\\n\\n  useEffect(() => {\\n    // Save tasks to local storage whenever tasks change\\n    localStorage.setItem('tasks', JSON.stringify(tasks));\\n  }, [tasks]);\\n\\n  const addTask = (newTask) => {\\n    setTasks([...tasks, newTask]);\\n  };\\n\\n  const deleteTask = (taskId) => {\\n    setTasks(tasks.filter((task) => task.id !== taskId));\\n  };\\n\\n  const toggleComplete = (taskId) => {\\n    setTasks(\\n      tasks.map((task) =>\\n        task.id === taskId ? { ...task, completed: !task.completed } : task\\n      )\\n    );\\n  };\\n\\n  return (\\n    <div className=\\\"bg-gray-100 h-screen\\\">\\n      <header className=\\\"bg-blue-600 text-white p-4\\\">\\n        <h1 className=\\\"text-3xl font-semibold text-center\\\">📅 Task Management Dashboard</h1>\\n        <p className=\\\"text-center\\\">{formattedDate}</p>\\n      </header>\\n      <main className=\\\"container mx-auto p-4 flex flex-col md:flex-row\\\">\\n        <div className=\\\"md:w-1/4 p-2\\\">\\n          <TaskForm addTask={addTask} />\\n        </div>\\n        <div className=\\\"md:w-1/2 p-2\\\">\\n          <TaskList tasks={tasks} deleteTask={deleteTask} toggleComplete={toggleComplete} />\\n        </div>\\n        <div className=\\\"md:w-1/4 p-2\\\">\\n          <Overview tasks={tasks} />\\n        </div>\\n      </main>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\"\n    },\n    \"/components/TaskForm.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Plus } from 'lucide-react';\\nimport { v4 as uuidv4 } from 'uuid';\\n\\nfunction TaskForm({ addTask }) {\\n  const [taskName, setTaskName] = useState('');\\n  const [taskDescription, setTaskDescription] = useState('');\\n  const [dueDate, setDueDate] = useState('');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (taskName.trim() === '') {\\n      return;\\n    }\\n\\n    const newTask = {\\n      id: uuidv4(),\\n      name: taskName,\\n      description: taskDescription,\\n      dueDate: dueDate,\\n      completed: false,\\n    };\\n\\n    addTask(newTask);\\n    setTaskName('');\\n    setTaskDescription('');\\n    setDueDate('');\\n  };\\n\\n  return (\\n    <div className=\\\"bg-white shadow-md rounded-md p-4\\\">\\n      <h2 className=\\\"text-lg font-semibold mb-2\\\">➕ Add New Task</h2>\\n      <form onSubmit={handleSubmit} className=\\\"space-y-2\\\">\\n        <div>\\n          <label htmlFor=\\\"taskName\\\" className=\\\"block text-sm font-medium text-gray-700\\\">Task Name:</label>\\n          <input\\n            type=\\\"text\\\"\\n            id=\\\"taskName\\\"\\n            className=\\\"mt-1 p-2 w-full border rounded-md shadow-sm focus:ring focus:ring-blue-200 focus:border-blue-300\\\"\\n            value={taskName}\\n            onChange={(e) => setTaskName(e.target.value)}\\n            required\\n          />\\n        </div>\\n        <div>\\n          <label htmlFor=\\\"taskDescription\\\" className=\\\"block text-sm font-medium text-gray-700\\\">Description:</label>\\n          <textarea\\n            id=\\\"taskDescription\\\"\\n            className=\\\"mt-1 p-2 w-full border rounded-md shadow-sm focus:ring focus:ring-blue-200 focus:border-blue-300\\\"\\n            value={taskDescription}\\n            onChange={(e) => setTaskDescription(e.target.value)}\\n            rows=\\\"3\\\"\\n          ></textarea>\\n        </div>\\n        <div>\\n          <label htmlFor=\\\"dueDate\\\" className=\\\"block text-sm font-medium text-gray-700\\\">Due Date:</label>\\n          <input\\n            type=\\\"date\\\"\\n            id=\\\"dueDate\\\"\\n            className=\\\"mt-1 p-2 w-full border rounded-md shadow-sm focus:ring focus:ring-blue-200 focus:border-blue-300\\\"\\n            value={dueDate}\\n            onChange={(e) => setDueDate(e.target.value)}\\n          />\\n        </div>\\n        <button type=\\\"submit\\\" className=\\\"bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-75\\\">\\n          Add Task\\n        </button>\\n      </form>\\n    </div>\\n  );\\n}\\n\\nexport default TaskForm;\\n\"\n    },\n    \"/components/TaskList.js\": {\n      \"code\": \"import React from 'react';\\nimport { Trash, Edit, Check, X } from 'lucide-react';\\nimport { format } from 'date-fns';\\n\\nfunction TaskList({ tasks, deleteTask, toggleComplete }) {\\n  return (\\n    <div className=\\\"bg-white shadow-md rounded-md p-4\\\">\\n      <h2 className=\\\"text-lg font-semibold mb-2\\\">📝 Task List</h2>\\n      {tasks.length === 0 ? (\\n        <p className=\\\"text-gray-500\\\">No tasks yet. Add some!</p>\\n      ) : (\\n        <ul className=\\\"divide-y divide-gray-200\\\">\\n          {tasks.map((task) => (\\n            <li key={task.id} className=\\\"py-2 flex items-center justify-between\\\">\\n              <div>\\n                <h3 className={`font-medium ${task.completed ? 'line-through text-gray-500' : ''}`}>\\n                  {task.name}\\n                </h3>\\n                <p className=\\\"text-gray-500 text-sm\\\">Due: {task.dueDate ? format(new Date(task.dueDate), 'MMM dd, yyyy') : 'No due date'}</p>\\n                {task.description && <p className=\\\"text-gray-600 text-sm\\\">{task.description}</p>}\\n              </div>\\n              <div className=\\\"flex space-x-2\\\">\\n                <button\\n                  onClick={() => toggleComplete(task.id)}\\n                  className=\\\"text-green-500 hover:text-green-700 focus:outline-none\\\"\\n                >\\n                  {task.completed ? <X className=\\\"h-5 w-5\\\" /> : <Check className=\\\"h-5 w-5\\\" />}\\n                </button>\\n                <button\\n                  onClick={() => deleteTask(task.id)}\\n                  className=\\\"text-red-500 hover:text-red-700 focus:outline-none\\\"\\n                >\\n                  <Trash className=\\\"h-5 w-5\\\" />\\n                </button>\\n              </div>\\n            </li>\\n          ))}\\n        </ul>\\n      )}\\n    </div>\\n  );\\n}\\n\\nexport default TaskList;\\n\"\n    },\n    \"/components/Overview.js\": {\n      \"code\": \"import React from 'react';\\nimport { Pie } from 'react-chartjs-2';\\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\\n\\nChartJS.register(ArcElement, Tooltip, Legend);\\n\\nfunction Overview({ tasks }) {\\n  const completedTasks = tasks.filter((task) => task.completed).length;\\n  const pendingTasks = tasks.length - completedTasks;\\n\\n  const data = {\\n    labels: ['Completed', 'Pending'],\\n    datasets: [\\n      {\\n        label: 'Task Status',\\n        data: [completedTasks, pendingTasks],\\n        backgroundColor: [\\n          'rgba(75, 192, 192, 0.6)',\\n          'rgba(255, 99, 132, 0.6)',\\n        ],\\n        borderWidth: 0,\\n      },\\n    ],\\n  };\\n\\n  const options = {\\n    responsive: true,\\n    maintainAspectRatio: false,\\n    plugins: {\\n      legend: {\\n        position: 'bottom',\\n      },\\n    },\\n  };\\n\\n  return (\\n    <div className=\\\"bg-white shadow-md rounded-md p-4\\\">\\n      <h2 className=\\\"text-lg font-semibold mb-2\\\">📊 Overview</h2>\\n      <div style={{ height: '250px' }}>\\n        <Pie data={data} options={options} />\\n      </div>\\n      <div className=\\\"mt-4\\\">\\n        <p className=\\\"text-gray-700\\\">\\n          <span className=\\\"font-semibold\\\">Total Tasks:</span> {tasks.length}\\n        </p>\\n        <p className=\\\"text-green-500\\\">\\n          <span className=\\\"font-semibold\\\">Completed:</span> {completedTasks}\\n        </p>\\n        <p className=\\\"text-red-500\\\">\\n          <span className=\\\"font-semibold\\\">Pending:</span> {pendingTasks}\\n        </p>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default Overview;\\n\"\n    }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/TaskForm.js\",\n    \"/components/TaskList.js\",\n    \"/components/Overview.js\"\n  ]\n}\n```"},
            ],
          },
        ],
    })

    // const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    // console.log(result.response.text());
